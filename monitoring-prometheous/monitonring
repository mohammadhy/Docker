#prometheous is a monitoring time-series database.
#Retrieval: duty to collection data from target ( nodeexporter, jobs) and store it to database-time-series.
#collection data is poason: something happen during time
#pass test is a bernoli: 0 or 1
#pull method means collect data himeself and no jobs or anything send data to be monitored.
# push gateway : some app not running always like backup, this tools aways up and ready to get those data when app started


docker pull prom/prometheus

docker image inspect prom/prometheus

## prometheus.yml

global:
  scrape_interval: 15s 	# By default, scrape targets every 15 seconds.
  scrape_timeout: 12s	# stop to resieve data
  evaluation_interval: 15s # Evaluate rules every 15 seconds.
# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']
      
  - job_name: ''
    static_config:
       - targets: ['ip']



datatypes: 
- instance: like Ram usage at this moment
- eange-vectore: ram usage [5h] ago
- scalar: float number

metrics:
- counter: start 0 and inceresly to  (+)infity like number of requests
- gauge: (-)infinity to (+)infinity cpu, ram
- summary: segmentaion our observation for bicket of sample
- histogram: 


scrape_configs:
  - job_name:       'node'

    static_configs:
      - targets: ['localhost:8080', 'localhost:8081']
        labels:
          group: 'production'

      - targets: ['localhost:8082']
        labels:
          group: 'canary'
